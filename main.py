# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XMzFAk5Q6vSwfoKjZ4rkMJRKWxBf4DDG
"""

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

# плотность воздуха
def air_density(height):
  T0 = 288.15    # стандартная температура на уровне моря в Кельвинах
  P0 = 101325    # стандартное давление    на уровне моря в Паскалях
  L  = 0.0065    # градиент температуры в Кельвинах на метр
  R  = 287.05    # универсальная газовая постоянная в Дж/(кг·К)
  M  = 0.0289644 # молярная масса воздуха в кг/моль
  # Рассчет температуры на заданной высоте
  # Рассчет давления    на заданной высоте
  # Рассчет плотности по уравнению состояния газа
  T = T0 - L * height
  P = P0 * (1 - L * height / T0) ** (9.8 * M / (R * L))
  rho = P / (R * T)
  return rho

#
def func(height, velocity, S):
  return S * air_density(height) * velocity**2 / 2


# Система уравнений
def aircraft_model(y, t, S, l, P_max, g, e, H_T, m0, ma, c, c_x0, c_y0, c_ya):
  m, v, h, theta, x = y
  u = np.radians(10)
  a = u - theta
  if m < (m0+ma):
    P_max = 0
    c = 0.0
  if (h > H_T) & (m > (m0+ma)):
    dt_dt = -theta
  else:
    dt_dt = 57.3 * ((((P_max * a) / 57.3) + (c_y0 + c_ya * a) * func(h, v, S)) / (m * v) - g * np.cos(theta) / v)
    if (dt_dt > 0) & (m <= (m0+ma)):
      dt_dt = 0
  dh_dt = v * np.sin(theta)
  dv_dt = (P_max - (c_x0 + (c_ya * a)**2 * S / (np.pi * e * l**2)) * func(h, v, S)) / m - g * np.sin(theta)
  dx_dt = v * np.cos(theta)
  dm_dt = -c

  return [dm_dt, dv_dt, dh_dt, dt_dt, dx_dt]

# Время полета (в с)
flight_time = 10.0 / 10 * 15 * 60

# Временные точки для решения уравнения
time_points = np.linspace(0, flight_time, 100)

P_max = 30      # максимальное значение тяги двигателя в Ньютонах
V_t0  = 15      # начальная скорость в метрах в секунду
V_T   = 50      # конечная  скорость в метрах в секунду
H_t0  = 10      # текущая   высота   в метрах
H_T   = 500    # конечная  высота   в метрах

S     = 0.55    # площадь крыла в метрах^2
l     = 2.8956  # размах  крыла в метрах
m     = 11.5    # масса самолета при полных баках в килограммах
m0    = 6.5     # масса самолета при пустых баках в килограммах
ma    = 2.0     # масса груза в килограммах
e     = 0.75    # коэффициент Освальда
g     = 9.80665 # ускорение свободного падения

c     = 0.0045   # Скорость расхода топлива килограммах в секунду

c_x0  = 0.0434  # коэффициент минимального лобового сопротивления
c_y0  = 0.23    # коэффициент подъемной силы при нулевом уголе тангажа
c_ya  = 5.6106  # коэффициент производной первого порядка по углу атаки

# Начальные значения массы топлива, скорости, высоты, тангажа и расстояния
initial_conditions = [m+ma, V_t0, H_t0, 0.0, 0.0]

# Решение системы уравнений
solution = odeint(aircraft_model, initial_conditions, time_points, args=(S, l, P_max, g, e, H_T, m0, ma, c, c_x0, c_y0, c_ya), hmax=0.1)

# Извлечение решений
fuel_mass, velocity, altitude, pitch, distance  = solution[:, 0], solution[:, 1], solution[:, 2], solution[:, 3], solution[:, 4]

# Построение графиков
plt.figure(figsize=(12, 6))
plt.subplot(221)
plt.plot(time_points, fuel_mass)
plt.title('Общая масса беспилотника')
plt.xlabel('Время (с)')
plt.ylabel('Общая масса беспилотника (кг)')

plt.subplot(222)
plt.plot(time_points, velocity)
plt.title('Скорость')
plt.xlabel('Время (с)')
plt.ylabel('Скорость (м/с)')

plt.subplot(223)
plt.plot(time_points, altitude)
plt.title('Высота')
plt.xlabel('Время (с)')
plt.ylabel('Высота (м)')

plt.subplot(224)
plt.plot(time_points, pitch)
plt.title('Тангаж')
plt.xlabel('Время (с)')
plt.ylabel('Тангаж (рад)')
plt.tight_layout()
plt.show()

plt.subplot(224)
plt.plot(time_points, distance)
plt.title('Расстояние')
plt.xlabel('Время (с)')
plt.ylabel('Расстояние (м)')
plt.tight_layout()
plt.show()

# Начальные значения массы топлива, скорости, высоты, тангажа и расстояния
initial_conditions = [fuel_mass[-1]-ma, velocity[-1], altitude[-1], pitch[-1], distance[-1]]


H_T = 1200
# Решение системы уравнений
solution = odeint(aircraft_model, initial_conditions, time_points, args=(S, l, P_max, g, e, H_T, m0, 0.0, c, c_x0, c_y0, c_ya), hmax=0.1, atol=1e-8, rtol=1e-8)

# Извлечение решений
fuel_mass_2, velocity_2, altitude_2, pitch_2, distance_2  = solution[:, 0], solution[:, 1], solution[:, 2], solution[:, 3], solution[:, 4]

fuel_mass_1 = fuel_mass[:-1]
velocity_1  = velocity[:-1]
altitude_1  = altitude[:-1]
pitch_1     = pitch[:-1]
distance_1  = distance[:-1]

fuel_mass_s = np.concatenate((fuel_mass_1,fuel_mass_2))
velocity_s  = np.concatenate((velocity_1,velocity_2))
altitude_s  = np.concatenate((altitude_1,altitude_2))
pitch_s     = np.concatenate((pitch_1,pitch_2))
distance_s  = np.concatenate((distance_1,distance_2))
print(velocity_s[-1])

flight_time = 20.0

time_points = np.linspace(0, 20 * 2, 199)
# Время полета (в с)
flight_time = 10.0 / 10 * 15 * 60

# Временные точки для решения уравнения
time_points = np.linspace(0, 2 * flight_time, 199)

# Построение графиков
plt.figure(figsize=(12, 6))
plt.subplot(221)
plt.plot(time_points, fuel_mass_s)
plt.title('Общая масса беспилотника')
plt.axhline (y=m0, color='red', linestyle='--')
plt.xlabel('Время (с)')
plt.ylabel('Общая масса беспилотника (кг)')

plt.subplot(222)
plt.plot(time_points, velocity_s)
plt.title('Скорость')
plt.xlabel('Время (с)')
plt.ylabel('Скорость (м/с)')

plt.subplot(223)
plt.plot(time_points, altitude_s)
plt.title('Высота')
plt.xlabel('Время (с)')
plt.ylabel('Высота (м)')

plt.subplot(224)
plt.plot(time_points, pitch_s)
plt.title('Тангаж')
plt.xlabel('Время (с)')
plt.ylabel('Тангаж (рад)')
plt.tight_layout()
plt.show()

plt.subplot(224)
plt.plot(time_points, distance_s)
plt.title('Расстояние')
plt.xlabel('Время (с)')
plt.ylabel('Расстояние (м)')
plt.tight_layout()
plt.show()